from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message

from common.models import User
from tgbot_app.keyboards import (gen_ai_types_kb, gen_img_model_kb,
                                 gen_txt_settings_kb)
from tgbot_app.utils.callbacks import AiTypeCallback, ProfileCallback
from tgbot_app.utils.enums import (AiTypeButtons, DefaultCommands, MainButtons,
                                   ProfileButtons)
from tgbot_app.utils.misc import gen_img_settings_text, gen_txt_settings_text
from tgbot_app.utils.states import GenerationState

router = Router()


@router.message(Command(DefaultCommands.ais.name))
@router.message(F.text == MainButtons.AIS.value)
@router.callback_query(ProfileCallback.filter(F.action == ProfileButtons.AIS))
async def show_ai_types(message: Message | CallbackQuery, state: FSMContext):
    await state.clear()

    if isinstance(message, CallbackQuery):
        await message.answer()
        message = message.message

    markup = await gen_ai_types_kb()
    text = ("üîπ –ê–≥—Ä–µ–≥–∞—Ç–æ—Ä <a href='https://–ù–µ–π—Ä–æ—Å–µ—Ç–∏.com'>–ù–µ–π—Ä–æ—Å–µ—Ç–∏.com</a> –ø–æ–º–æ–∂–µ—Ç —Å —Ä–µ—à–µ–Ω–∏–µ–º –í–∞—à–∏—Ö –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã—Ö "
            "–∑–∞–¥–∞—á —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –í–∞—à–µ–π —Ä–∞–±–æ—Ç—ã.\n\n"
            "üíé - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞—à–∏ —Ç–æ–∫–µ–Ω—ã —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏. –°—Ç–æ–∏–º–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö "
            "–Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –º–æ–∂–µ—Ç –ø–æ–∫–∞–∑–∞—Ç—å—Å—è –¥–æ—Ä–æ–≥–∏–º, —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –∏—Ö —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç—å —É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.")

    await message.answer(text=text, reply_markup=markup, disable_web_page_preview=True)


@router.callback_query(AiTypeCallback.filter(F.type == AiTypeButtons.TEXT))
async def text_generation(callback: CallbackQuery, user: User, state: FSMContext):
    await state.set_state(GenerationState.TEXT)
    await callback.answer()

    text = gen_txt_settings_text(user)
    markup = await gen_txt_settings_kb(user)

    await callback.message.answer(text=text, reply_markup=markup)


@router.callback_query(AiTypeCallback.filter(F.type == AiTypeButtons.IMAGE))
async def image_generation(callback: CallbackQuery, user: User, state: FSMContext):
    await state.set_state(GenerationState.IMAGE)
    await callback.answer()

    text = gen_img_settings_text(user)
    markup = await gen_img_model_kb(user)

    await callback.message.answer(text=text, reply_markup=markup)
