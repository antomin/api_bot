import os

from aiogram import Bot
from aiogram.dispatcher.event.bases import CancelHandler
from aiogram.types import Message

from common.db_api import get_messages, get_obj_by_id
from common.enums import ImageModels, TextModels, VideoModels
from common.models import Tariff, User
from common.settings import settings
from tgbot_app.keyboards import gen_error_kb, gen_no_tokens_kb
from tgbot_app.services import neiro_api, translator
from tgbot_app.utils.text_variables import (ERROR_STT_TEXT,
                                            ERROR_TRANSLATION_TEXT)


def decl(num: int, titles: tuple) -> str:
    cases = [2, 0, 1, 1, 1, 2]
    if 4 < num % 100 < 20:
        idx = 2
    elif num % 10 < 5:
        idx = cases[num % 10]
    else:
        idx = cases[5]
    return titles[idx]


def delete_file(path: str) -> None:
    try:
        os.remove(path)
    except:
        pass


async def gen_profile_text(user: User) -> str:
    tariff: Tariff = user.tariff

    if not tariff:
        tariff_str = "Free"
    elif tariff.is_trial:
        main_tariff: Tariff = await get_obj_by_id(Tariff, tariff.main_tariff_id)
        tariff_str = f"Trial {main_tariff.token_balance}"
    else:
        tariff_str = f"PREMIUM {tariff.token_balance}"

    text = f'üë®‚Äçüíª <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b>{(", " + user.first_name) if user.first_name else "<b>!</b>"}\n'
    if user.username:
        text += f"‚îú –í–∞—à —é–∑–µ—Ä–Ω–µ–π–º: <code>@{user.username}</code>\n"
    text += f"‚îî –í–∞—à ID: <code>{user.id}</code>\n\nüí≥ –ü–æ–¥–ø–∏—Å–∫–∞: <b>{tariff_str}</b>\n"

    if not tariff:
        chatgpt_daily_str = decl(user.chatgpt_daily_limit, ("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "–≥–µ–Ω–µ—Ä–∞—Ü–∏–π"))
        sd_daily_str = decl(user.sd_daily_limit, ("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "–≥–µ–Ω–µ—Ä–∞—Ü–∏–π"))
        dalle_2_str = decl(user.dalle_2_daily_limit, ("–≥–µ–Ω–µ—Ä–∞—Ü–∏—è", "–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "–≥–µ–Ω–µ—Ä–∞—Ü–∏–π"))

        text += (
            f"‚îú –í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã: {user.token_balance}\n"
            f"‚îú {user.chatgpt_daily_limit} {chatgpt_daily_str} ChatGPT 3.5\n"
            f"‚îú {user.sd_daily_limit} {sd_daily_str} StableDiffusion\n"
            f"‚îî {user.dalle_2_daily_limit} {dalle_2_str} Dall-E 2\n\n"
            f"<i>* –í–∞—à–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞.</i>"
        )
    else:
        words, time_left = user.sub_time_left()
        time_left_str = f"{time_left} {decl(time_left, words)}"

        text += (
            f"‚îú –ü–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑: <u>{time_left_str}</u>\n"
            f"‚îú –ö–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ: {tariff.token_balance} —Ç–æ–∫–µ–Ω–æ–≤\n"
            f"‚îú –¢–µ–∫—É—â–∏–µ –∫–æ–ª-–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {user.token_balance}\n"
            f"‚îî –ë–µ–∑–ª–∏–º–∏—Ç ChatGPT 3.5 + –°–∏–Ω—Ç–µ–∑ —Ä–µ—á–∏"
        )

    return text


def gen_txt_settings_text(user: User) -> str:
    text = ("üîπ –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≥–æ–ª–æ—Å–æ–º –∏ –ø–æ–ª—É—á–∞—Ç—å –æ–∑–≤—É—á–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –∏–∑–º–µ–Ω—è—Ç—å –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏. "
            "–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–µ—Ä—Å–∏–∏ ChatGPT.\n\nüíé <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> ")

    if user.txt_model == TextModels.GPT_3_TURBO:
        if not user.tariff:
            text += (
                f"{settings.MODELS[user.txt_model].cost} —Ç–æ–∫–µ–Ω–∞\n"
                f"‚îú –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {user.chatgpt_daily_limit} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                f"‚îî –ù–∞ –º–æ–¥–µ–ª—å ChatGPT 3.5 Turbo (—ç—Ç–æ —Å–∞–º–∞—è –ø–æ–ø—É–ª—è—Ä–Ω–∞—è –º–æ–¥–µ–ª—å) —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –±–µ–∑–ª–∏–º–∏—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ."
            )
        else:
            text += f"–ë–µ–∑–ª–∏–º–∏—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"
    else:
        text += f"{settings.MODELS[user.txt_model].cost} —Ç–æ–∫–µ–Ω–æ–≤"

    return text


def gen_img_settings_text(user: User) -> str:
    text = (f"üîπ –î–ª—è –í–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π Dall-E 2, Dall-E3, Stable diffusion –∏ –¥—Ä. "
            f"–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n"
            f"üíé <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {settings.MODELS[user.img_model].cost} —Ç–æ–∫–µ–Ω–æ–≤")

    if not user.tariff and user.img_model in (ImageModels.DALLE_2, ImageModels.STABLE_DIFFUSION):
        num = user.dalle_2_daily_limit if user.img_model == ImageModels.DALLE_2 else user.sd_daily_limit
        text += f"\n‚îî –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {num} –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"

    return text


def can_send_query(user: User, model: ImageModels | TextModels | VideoModels) -> bool:  # TODO Review
    model_cost = settings.MODELS[model].cost
    if not user.tariff:
        if model in (ImageModels.DALLE_2, ImageModels.STABLE_DIFFUSION, TextModels.GPT_3_TURBO):
            if model == TextModels.GPT_3_TURBO:
                return bool(user.chatgpt_daily_limit) or user.token_balance >= model_cost
            if model == ImageModels.DALLE_2:
                return bool(user.dalle_2_daily_limit) or user.token_balance >= model_cost
            if model == ImageModels.STABLE_DIFFUSION:
                return bool(user.sd_daily_limit) or user.token_balance >= model_cost
        return user.token_balance >= model_cost
    else:
        if model == TextModels.GPT_3_TURBO:
            return True
        return user.token_balance >= model_cost


async def send_no_balance_msg(user: User, bot: Bot) -> None:
    if not user.tariff:
        text = "üîí –í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏! –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–∫—É–ø–∏—Ç—å –∏—Ö –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ 30 –¥–Ω–µ–π."
    else:
        text = ("üîí –ü–æ—Ö–æ–∂–µ –í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –í–∞—à–∏ —Ç–æ–∫–µ–Ω—ã, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ. –ù–æ –í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –µ—â–µ "
                "—Ç–æ–∫–µ–Ω–æ–≤. –î–ª—è –í–∞—Å –æ–Ω–∏ –±—É–¥—É—Ç –≤ 2 —Ä–∞–∑–∞ –¥–µ—à–µ–≤–ª–µ.")
    markup = await gen_no_tokens_kb()
    await bot.send_message(chat_id=user.id, text=text, reply_markup=markup)
    raise CancelHandler()


async def handle_voice_prompt(message: Message, user: User) -> str:
    if not user.tariff:
        await message.answer(text="üó£Ô∏è –ì–æ–ª–æ—Å–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤ —Ç–∞—Ä–∏—Ñ–µ PREMIUM.",
                             reply_markup=await gen_no_tokens_kb())
        raise CancelHandler()

    if message.voice.duration > 30:
        await message.answer(text="üó£Ô∏è –î–ª–∏–Ω–∞ –∞—É–¥–∏–æ –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 30—Å–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        raise CancelHandler()

    path = f"{settings.MEDIA_DIR}/tmp/{user.id}.ogg"
    await message.bot.download(file=message.voice.file_id, destination=path)
    voice_url = f"{settings.DOMAIN}/tmp/{user.id}.ogg"

    result = await neiro_api.speech_to_text(voice_url)

    delete_file(path)

    if not result.success:
        await message.answer(text=ERROR_STT_TEXT, reply_markup=await gen_error_kb())
        raise CancelHandler()

    return result.result


async def gen_conversation(user: User, prompt: str) -> list[dict]:
    if user.txt_model_role_id:
        conversation = [{"role": "system", "content": user.txt_model_role.prompt}]
    else:
        conversation = [{"role": "system", "content": "You are a personal helpful assistant. Fluent Russian speaks."}]

    if user.text_session_id:
        messages = await get_messages(user.text_session_id)  # noqa
        for msg in messages:
            if msg.prompt and msg.result:
                conversation.append({"role": "user", "content": msg.prompt})
                conversation.append({"role": "assistant", "content": msg.result})

    conversation.append({"role": "user", "content": prompt})

    return conversation


async def translate_text(text: str, message: Message) -> str:
    result = await translator.translate(text)

    if result.success:
        return result.result

    await message.answer(text=ERROR_TRANSLATION_TEXT)
    raise CancelHandler()


def parse_user_work_struct(raw_struct: str) -> dict | None:
    struct = {}
    raw_lst = raw_struct.split("\n")
    cur_chapter = ""
    cur_subchapter = ""

    try:
        for row in raw_lst:
            if not row:
                continue
            if row.strip()[0] == "*":
                cur_chapter = row.replace("*", "").strip()
                struct[cur_chapter] = {}
            elif row.strip()[0] == "+":
                cur_subchapter = row.replace("+", "").strip()
                struct[cur_chapter][cur_subchapter] = []
            elif row.strip()[0] == "-":
                struct[cur_chapter][cur_subchapter].append(row.replace("-", "").strip())
            else:
                raise KeyError

    except KeyError:
        return

    return struct
